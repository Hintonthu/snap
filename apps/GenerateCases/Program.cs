using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using ASELib;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Diagnostics;
using System.Web;
using System.Threading;

namespace GenerateCases
{
    //
    // Creates a set of Cases by looking at the existing MAFs and using the Genome Data Commons API to look at what is available.  It then writes them into the cases file.
    //
    class Program
    {

        class MAFLoadStatus
        {
            public int nToLoad;
            public int nLoaded = 0;
            public int nFailed = 0;
        }
        static void ReadMafFileAndAppendToList(string filename, string file_id, List<ASETools.MAFLine> allMAFLines, MAFLoadStatus loadStatus)
        {
            var mafLinesForThisFile = ASETools.MAFLine.ReadFile(filename, file_id);

            lock (loadStatus)
            {
                loadStatus.nLoaded++;

                Console.Write(loadStatus.nLoaded + "/" + loadStatus.nToLoad + " ");

                if (null == mafLinesForThisFile)
                {
                    loadStatus.nFailed++;
                    Console.WriteLine("MAF load of " + filename + " failed.");
                }

                allMAFLines.AddRange(mafLinesForThisFile);
            }
        }

        static List<ASETools.MAFLine> LoadMAFs(ASETools.ASEConfirguation configuration)
        {
            var stopwatch = new Stopwatch();
            stopwatch.Start();

            if (configuration.mafManifestPathname == null || configuration.mafManifestPathname == "")
            {
                Console.WriteLine("The MAF manifest must exist in order to run GenerateCases.  Go back and run the process manager to generate the script to make the maf manifest.");
                return null;
            }

            var mafManifest = ASETools.MAFInfo.LoadMAFManifest(configuration.mafManifestPathname);
            if (null == mafManifest)
            {
                Console.WriteLine("Unable to load maf manifest " + configuration.mafManifestPathname);
                return null;
            }

            var downloadedFiles = ASETools.DownloadedFile.ScanFilesystems(configuration);

            foreach (var mafEntry in mafManifest)
            {
                var mafInfo = mafEntry.Value;

                if (!downloadedFiles.ContainsKey(mafInfo.file_id))
                {
                    Console.WriteLine("Missing MAF file " + mafInfo.file_id + ".  Download it (which should be in the script generated by ASEProcessManager) and rerun.");
                    return null;
                }
            }

            Console.Write("Loading MAF entries..");
            var allMAFLines = new List<ASETools.MAFLine>();

            var threads = new List<Thread>();

            var loadStatus = new MAFLoadStatus();
            loadStatus.nToLoad = mafManifest.Count();

            foreach (var mafEntry in mafManifest)
            {
                var mafInfo = mafEntry.Value;

                threads.Add(new Thread(() => ReadMafFileAndAppendToList(downloadedFiles[mafInfo.file_id].fileInfo.FullName, mafInfo.file_id, allMAFLines, loadStatus)));
            }

            threads.ForEach(t => t.Start());
            threads.ForEach(t => t.Join());

            Console.WriteLine(ASETools.ElapsedTimeInSeconds(stopwatch) + " to load " + allMAFLines.Count() + " mutations.");

            if (loadStatus.nFailed > 0)
            {
                Console.WriteLine("Giving up due to failed MAF load(s).");
                return null;
            }

            return allMAFLines;
        }

        static void Main(string[] args)
        {
            var stopwatch = new Stopwatch();
            stopwatch.Start();

            var configuration = ASETools.ASEConfirguation.loadFromFile(args);

            var allMafLines = LoadMAFs(configuration);
            if (null == allMafLines)
            {
                return;
            }

            var tumorSampleByNormalSample = new Dictionary<string, List<string>>();

            foreach (var mafLine in allMafLines)
            {
                if (!tumorSampleByNormalSample.ContainsKey(mafLine.Matched_Norm_Sample_UUID))
                {
                    tumorSampleByNormalSample.Add(mafLine.Matched_Norm_Sample_UUID, new List<string>());
                }

                if (!tumorSampleByNormalSample[mafLine.Matched_Norm_Sample_UUID].Contains(mafLine.Tumor_Sample_UUID))
                {
                    tumorSampleByNormalSample[mafLine.Matched_Norm_Sample_UUID].Add(mafLine.Tumor_Sample_UUID);
                }
            }

            var webClient = ASETools.getWebClient();

            if (null == webClient)
            {
                //
                // Probably a version change at gdc.  Give up.
                //
                Console.WriteLine("Unable to get web client, quitting.");
                return;
            }

            //string filesForCaseRequest = "{\"op\":\"in\",\"content\":{\"field\":\"cases.case_id\",\"value\":[\"fcf64b55-5c4f-4d82-ac6a-4713d01143cb\",\"25ebc29a-7598-4ae4-ba7f-618d448882cc\",\"fe660d7c-2746-4b50-ab93-b2ed99960553\"]}}";
            //Console.WriteLine(filesForCaseRequest);

            //var response = webClient.DownloadString(ASETools.urlPrefix + "files?pretty=true&filters=" + filesForCaseRequest + "&fields=data_type,updated_datetime,created_datetime,file_name,md5sum,data_format,access,platform,state,file_id,data_category,file_size,type,experimental_strategy,submitter_id,cases.samples.sample_type_id,cases.samples.sample_type,cases.samples.sample_id,analysis.workflow_link");

            //Console.WriteLine("response " + response);

            var filesSerializer = new DataContractJsonSerializer(typeof(ASETools.GDCData<ASETools.GDCFile>));
            //var filesData = (ASETools.GDCData<ASETools.GDCFile>)filesSerializer.ReadObject(new MemoryStream(Encoding.ASCII.GetBytes(response)));

            var allCases = new Dictionary<string, ASETools.GDCCase>();   // Indexed by caseId

            //
            // Call the web server to download all of the cases.  They come back paginated, so we need to step through them.
            //

            var casesSerializer = new DataContractJsonSerializer(typeof(ASETools.GDCData<ASETools.GDCCase>));
            int from = 1;

            string tcgaFiltersString = "{\"op\":\"in\", \"content\": {\"field\": \"project.program.name\", \"value\": " + ASETools.generateFilterList(configuration.programNames) + "}}";
 
            //Console.WriteLine("Encoded string is " + HttpUtility.UrlEncode(tcgaFiltersString));

            var periodicStopwatch = new Stopwatch();
            periodicStopwatch.Start();

            Console.Write("Loading cases...");

            for (; ; )
            {
                var serverData = webClient.DownloadString(ASETools.urlPrefix + "cases?from=" + from + "&size=100&filters=" + HttpUtility.UrlEncode(tcgaFiltersString) +
                    "&fields=" + ASETools.GDCCase.fields);

                ASETools.GDCData<ASETools.GDCCase> caseData = (ASETools.GDCData<ASETools.GDCCase>)casesSerializer.ReadObject(new MemoryStream(Encoding.ASCII.GetBytes(serverData)));

                //
                // For whatever reason the JSON decoder is failing to get the pagination information, so we extract it directly.
                //
                var pagination = ASETools.GDCPagination.extractFromString(serverData);

                if (null == pagination)
                {
                    Console.WriteLine("Couldn't parse pagination from server on cases download, from = " + from);
                    return;
                }

                if (pagination.from != from)
                {
                    Console.WriteLine("Pagination from server shows data starting at the wrong place, " + pagination.from + " != " + from);
                    return;
                }

                if (pagination.count != caseData.data.hits.Count()) 
                {
                    Console.WriteLine("Pagination from server has count mismatch with returned data, " + pagination.count + " != " + caseData.data.hits.Count());
                    return;
                }

                foreach (var case_ in caseData.data.hits)
                {
                    if (allCases.ContainsKey(case_.case_id))
                    {
                        Console.WriteLine("Duplicate caseID " + case_.case_id);
                    }
                    else
                    {
                        allCases.Add(case_.case_id, case_);
                    }
                }

                from += pagination.count;

                if (from > pagination.total)
                {
                    break;
                }

                if (periodicStopwatch.ElapsedMilliseconds >= 60000)
                {
                    Console.Write(from + " ");
                    periodicStopwatch.Stop();
                    periodicStopwatch.Reset();
                    periodicStopwatch.Start();
                }
/*BJB*/ break; // test the file part below
            }
            Console.WriteLine(allCases.Count() + " in " + ASETools.ElapsedTimeInSeconds(stopwatch) + ", " + allCases.Count() * 1000 / stopwatch.ElapsedMilliseconds + "/s");

            //
            // Now run through all of the cases looking to see which have files for tumor and matched normal DNA and tumor RNA.
            //
            int nMissingTumorDNA = 0;
            int nMissingNormalDNA = 0;
            int nMissingVCF = 0;
            int nMissingTumorRNA = 0;
            int nMissingMAF = 0;
            int nComplete = 0;
            int nWithNormalRNA = 0;
            int nWithMethylation = 0;

            Console.Write("Loading files for cases...");
            periodicStopwatch.Stop();
            periodicStopwatch.Reset();
            periodicStopwatch.Start();

            int nCasesProcessed = 0;

            var cases = new Dictionary<string, ASETools.Case>();

            foreach (var caseEntry in allCases)
            {
                var case_ = caseEntry.Value;

                ASETools.GDCFile tumorRNA = null;
                ASETools.GDCFile tumorDNA = null;
                ASETools.GDCFile normalDNA = null;
                ASETools.GDCFile normalRNA = null;
                ASETools.GDCFile methylation = null;
                List<ASETools.GDCFile> vcf = new List<ASETools.GDCFile>();
                List<ASETools.GDCFile> maf = new List<ASETools.GDCFile>();

                from = 1;

                for (; ; )
                {
                    if (periodicStopwatch.ElapsedMilliseconds > 60000)
                    {
                        Console.Write(nCasesProcessed + " ");
                        periodicStopwatch.Stop();
                        periodicStopwatch.Reset();
                        periodicStopwatch.Start();
                    }

                    nCasesProcessed++;

                    string fileFilter = "{\"op\":\"in\",\"content\":{\"field\":\"cases.case_id\",\"value\":[\"" + case_.case_id + "\"]}}";
                    var response = webClient.DownloadString(ASETools.urlPrefix + "files?from=" + from + "&size=100&pretty=true&filters=" + fileFilter + "&fields=data_type,updated_datetime,created_datetime,file_name,md5sum,data_format,access,platform,state,file_id,data_category,file_size,type,experimental_strategy,submitter_id,cases.samples.sample_type_id,cases.samples.sample_type,platform,cases.samples.sample_id,analysis.workflow_link");

                    ASETools.GDCData<ASETools.GDCFile> fileData = (ASETools.GDCData<ASETools.GDCFile>)filesSerializer.ReadObject(new MemoryStream(Encoding.ASCII.GetBytes(response)));

                    var pagination = ASETools.GDCPagination.extractFromString(response);

                    if (null == pagination)
                    {
                        Console.WriteLine("Couldn't parse pagination from server on cases download, from = " + from);
                        return;
                    }

                    if (pagination.from != from)
                    {
                        Console.WriteLine("Pagination from server shows data starting at the wrong place, " + pagination.from + " != " + from);
                        return;
                    }

                    if (pagination.count != fileData.data.hits.Count())
                    {
                        Console.WriteLine("Pagination from server has count mismatch with returned data, " + pagination.count + " != " + fileData.data.hits.Count());
                        return;
                    }

                    if (null == fileData)
                    {
                        Console.WriteLine("Unable to parse file data " + response);
                    } 
                    else
                    {
                        foreach (var file in fileData.data.hits)
                        {
                            if (file.state != "live" && file.state != "submitted")
                            {
                                continue;
                            }

                            if (file.data_format == "BAM" && file.data_type == "Aligned Reads")
                            {
                                if (0 == file.cases.Count() || 0 == file.cases[0].samples.Count())
                                {
                                    continue;
                                }

                                int type_id = -1;
                                try
                                {
                                    type_id = Convert.ToInt32(file.cases[0].samples[0].sample_type_id);
                                }
                                catch (FormatException)
                                { 
                                    //
                                    // If it doesn't parse, leave the default -1 value in type_id, which will cause us to ignore this.
                                    //
                                }

                                //
                                // Type IDs from 1 to 9 are tumor samples and 10 to 19 are matched normal.
                                //
                                if (type_id < 1 || type_id >= 20)
                                {
                                    //
                                    // Either a format error, or else a non-tumor, non-normal sample (like a cell line or control sample or something).
                                    // Ignore it.
                                    //
                                    continue;
                                }

                                bool tumor = type_id < 10;


                                if (file.experimental_strategy == "RNA-Seq")
                                {
                                    if (tumor)
                                    {
                                        tumorRNA = ASETools.GDCFile.selectNewestUpdated(tumorRNA, file);
                                    }
                                    else
                                    {
                                        normalRNA = ASETools.GDCFile.selectNewestUpdated(normalRNA, file);
                                    }
                                }
                                else if (file.experimental_strategy == "WXS" || file.experimental_strategy == "WGS")
                                {
                                    if (tumor)
                                    {
                                        tumorDNA = ASETools.GDCFile.selectNewestUpdated(tumorDNA, file);
                                    }
                                    else
                                    {
                                        normalDNA = ASETools.GDCFile.selectNewestUpdated(normalDNA, file);
                                    }
                                }
                            }
                            else if (file.data_format == "VCF")
                            {
                                vcf.Add(file);
                            }
                            else if (file.data_format == "MAF")
                            {
                                maf.Add(file);
                            }
                            else if (file.data_format == "TXT" && file.data_type == "Methylation Beta Value")
                            {
                                methylation = ASETools.GDCFile.selectNewestUpdated(methylation, file);
                            }
                        } // Foreach file in this batch
                    } // If file data parsed

///*BJB - just to get it out of the loop scope for the debugger*/ filesData = fileData;
                    from += pagination.count;

                    if (from > pagination.total)
                    {
                        break;
                    }

                } // forever (looping over file pagination)

                if (null == tumorDNA)
                {
                    nMissingTumorDNA++;
                }
                else if (null == normalDNA)
                {
                    nMissingNormalDNA++;
                }
                else if (null == tumorRNA)
                {
                    nMissingTumorRNA++;
                }
                else if (vcf.Count() == 0)
                {
                    nMissingVCF++;
                }
                else if (maf.Count() == 0)
                {
                    nMissingMAF++;
                }
                else
                {
                    nComplete++;
                    if (null != normalRNA)
                    {
                        nWithNormalRNA++;
                    }

                    if (null != methylation)
                    {
                        nWithMethylation++;
                    }
                }

            }// foreach case

            Console.WriteLine();

            Console.WriteLine("Of " + allCases.Count() + ", " + nMissingTumorDNA + " don't have tumor DNA, " + nMissingNormalDNA + " don't have matched normal DNA, " + nMissingTumorRNA + " don't have tumor RNA, " + nMissingVCF + " don't have variant calls, " + nMissingMAF + " don't have MAFs and " + nComplete + " are complete.  Of the complete, " + nWithNormalRNA + " also have normal RNA and " + nWithMethylation + " have methylation.");
        } // Main

    }
}
